// Code generated by MockGen. DO NOT EDIT.
// Source: C:/Users/goale/go/leal-challenge/src/domain/ports/use_case_port.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/unawaretub86/leal-challenge/src/domain/entities/domain"
)

// MockUseCasePort is a mock of UseCasePort interface.
type MockUseCasePort struct {
	ctrl     *gomock.Controller
	recorder *MockUseCasePortMockRecorder
}

// MockUseCasePortMockRecorder is the mock recorder for MockUseCasePort.
type MockUseCasePortMockRecorder struct {
	mock *MockUseCasePort
}

// NewMockUseCasePort creates a new mock instance.
func NewMockUseCasePort(ctrl *gomock.Controller) *MockUseCasePort {
	mock := &MockUseCasePort{ctrl: ctrl}
	mock.recorder = &MockUseCasePortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCasePort) EXPECT() *MockUseCasePortMockRecorder {
	return m.recorder
}

// CalculateCashback mocks base method.
func (m *MockUseCasePort) CalculateCashback(arg0 *domain.Purchase, arg1 domain.Campaign) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateCashback", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CalculateCashback indicates an expected call of CalculateCashback.
func (mr *MockUseCasePortMockRecorder) CalculateCashback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateCashback", reflect.TypeOf((*MockUseCasePort)(nil).CalculateCashback), arg0, arg1)
}

// CalculatePoints mocks base method.
func (m *MockUseCasePort) CalculatePoints(arg0 *domain.Purchase, arg1 domain.Campaign) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculatePoints", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CalculatePoints indicates an expected call of CalculatePoints.
func (mr *MockUseCasePortMockRecorder) CalculatePoints(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculatePoints", reflect.TypeOf((*MockUseCasePort)(nil).CalculatePoints), arg0, arg1)
}

// GetCampaign mocks base method.
func (m *MockUseCasePort) GetCampaign(arg0 uint64) (*domain.Campaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCampaign", arg0)
	ret0, _ := ret[0].(*domain.Campaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCampaign indicates an expected call of GetCampaign.
func (mr *MockUseCasePortMockRecorder) GetCampaign(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCampaign", reflect.TypeOf((*MockUseCasePort)(nil).GetCampaign), arg0)
}

// GetPurchase mocks base method.
func (m *MockUseCasePort) GetPurchase(arg0 uint64) (*domain.Purchase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPurchase", arg0)
	ret0, _ := ret[0].(*domain.Purchase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPurchase indicates an expected call of GetPurchase.
func (mr *MockUseCasePortMockRecorder) GetPurchase(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPurchase", reflect.TypeOf((*MockUseCasePort)(nil).GetPurchase), arg0)
}

// GetUser mocks base method.
func (m *MockUseCasePort) GetUser(arg0 uint64) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUseCasePortMockRecorder) GetUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUseCasePort)(nil).GetUser), arg0)
}

// RedeemCashBack mocks base method.
func (m *MockUseCasePort) RedeemCashBack(arg0 *domain.Redeem, arg1 domain.Campaign, arg2 domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RedeemCashBack", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RedeemCashBack indicates an expected call of RedeemCashBack.
func (mr *MockUseCasePortMockRecorder) RedeemCashBack(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RedeemCashBack", reflect.TypeOf((*MockUseCasePort)(nil).RedeemCashBack), arg0, arg1, arg2)
}

// RedeemPoints mocks base method.
func (m *MockUseCasePort) RedeemPoints(arg0 *domain.Redeem, arg1 domain.Purchase, arg2 domain.Campaign, arg3 domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RedeemPoints", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// RedeemPoints indicates an expected call of RedeemPoints.
func (mr *MockUseCasePortMockRecorder) RedeemPoints(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RedeemPoints", reflect.TypeOf((*MockUseCasePort)(nil).RedeemPoints), arg0, arg1, arg2, arg3)
}
