// Code generated by MockGen. DO NOT EDIT.
// Source: C:/Users/goale/go/leal-challenge/src/domain/ports/repository_port.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/unawaretub86/leal-challenge/src/domain/entities/domain"
)

// MockRepositoryPort is a mock of RepositoryPort interface.
type MockRepositoryPort struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryPortMockRecorder
}

// MockRepositoryPortMockRecorder is the mock recorder for MockRepositoryPort.
type MockRepositoryPortMockRecorder struct {
	mock *MockRepositoryPort
}

// NewMockRepositoryPort creates a new mock instance.
func NewMockRepositoryPort(ctrl *gomock.Controller) *MockRepositoryPort {
	mock := &MockRepositoryPort{ctrl: ctrl}
	mock.recorder = &MockRepositoryPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryPort) EXPECT() *MockRepositoryPortMockRecorder {
	return m.recorder
}

// CreateBranch mocks base method.
func (m *MockRepositoryPort) CreateBranch(arg0 domain.Branch) (*domain.Branch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBranch", arg0)
	ret0, _ := ret[0].(*domain.Branch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBranch indicates an expected call of CreateBranch.
func (mr *MockRepositoryPortMockRecorder) CreateBranch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBranch", reflect.TypeOf((*MockRepositoryPort)(nil).CreateBranch), arg0)
}

// CreateCampaign mocks base method.
func (m *MockRepositoryPort) CreateCampaign(arg0 domain.Campaign) (*domain.Campaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCampaign", arg0)
	ret0, _ := ret[0].(*domain.Campaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCampaign indicates an expected call of CreateCampaign.
func (mr *MockRepositoryPortMockRecorder) CreateCampaign(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCampaign", reflect.TypeOf((*MockRepositoryPort)(nil).CreateCampaign), arg0)
}

// CreateCommerce mocks base method.
func (m *MockRepositoryPort) CreateCommerce(arg0 domain.Commerce) (*domain.Commerce, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCommerce", arg0)
	ret0, _ := ret[0].(*domain.Commerce)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCommerce indicates an expected call of CreateCommerce.
func (mr *MockRepositoryPortMockRecorder) CreateCommerce(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCommerce", reflect.TypeOf((*MockRepositoryPort)(nil).CreateCommerce), arg0)
}

// CreateUser mocks base method.
func (m *MockRepositoryPort) CreateUser(arg0 domain.User) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockRepositoryPortMockRecorder) CreateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockRepositoryPort)(nil).CreateUser), arg0)
}

// GetBranchCampaigns mocks base method.
func (m *MockRepositoryPort) GetBranchCampaigns(arg0 uint64) (domain.Campaigns, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBranchCampaigns", arg0)
	ret0, _ := ret[0].(domain.Campaigns)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBranchCampaigns indicates an expected call of GetBranchCampaigns.
func (mr *MockRepositoryPortMockRecorder) GetBranchCampaigns(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBranchCampaigns", reflect.TypeOf((*MockRepositoryPort)(nil).GetBranchCampaigns), arg0)
}

// GetCampaign mocks base method.
func (m *MockRepositoryPort) GetCampaign(arg0 uint64) (*domain.Campaign, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCampaign", arg0)
	ret0, _ := ret[0].(*domain.Campaign)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCampaign indicates an expected call of GetCampaign.
func (mr *MockRepositoryPortMockRecorder) GetCampaign(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCampaign", reflect.TypeOf((*MockRepositoryPort)(nil).GetCampaign), arg0)
}

// GetCommerceCampaigns mocks base method.
func (m *MockRepositoryPort) GetCommerceCampaigns(arg0 uint64) (domain.Campaigns, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommerceCampaigns", arg0)
	ret0, _ := ret[0].(domain.Campaigns)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommerceCampaigns indicates an expected call of GetCommerceCampaigns.
func (mr *MockRepositoryPortMockRecorder) GetCommerceCampaigns(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommerceCampaigns", reflect.TypeOf((*MockRepositoryPort)(nil).GetCommerceCampaigns), arg0)
}

// GetPurchase mocks base method.
func (m *MockRepositoryPort) GetPurchase(arg0 uint64) (*domain.Purchase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPurchase", arg0)
	ret0, _ := ret[0].(*domain.Purchase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPurchase indicates an expected call of GetPurchase.
func (mr *MockRepositoryPortMockRecorder) GetPurchase(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPurchase", reflect.TypeOf((*MockRepositoryPort)(nil).GetPurchase), arg0)
}

// GetUser mocks base method.
func (m *MockRepositoryPort) GetUser(arg0 uint64) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockRepositoryPortMockRecorder) GetUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockRepositoryPort)(nil).GetUser), arg0)
}

// Redeem mocks base method.
func (m *MockRepositoryPort) Redeem(arg0 domain.Redeem) (*domain.Redeem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Redeem", arg0)
	ret0, _ := ret[0].(*domain.Redeem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Redeem indicates an expected call of Redeem.
func (mr *MockRepositoryPortMockRecorder) Redeem(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Redeem", reflect.TypeOf((*MockRepositoryPort)(nil).Redeem), arg0)
}

// RegisterPurchase mocks base method.
func (m *MockRepositoryPort) RegisterPurchase(arg0 domain.Purchase) (*domain.Purchase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterPurchase", arg0)
	ret0, _ := ret[0].(*domain.Purchase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterPurchase indicates an expected call of RegisterPurchase.
func (mr *MockRepositoryPortMockRecorder) RegisterPurchase(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterPurchase", reflect.TypeOf((*MockRepositoryPort)(nil).RegisterPurchase), arg0)
}

// UpdateUser mocks base method.
func (m *MockRepositoryPort) UpdateUser(arg0 uint64, arg1 domain.User) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockRepositoryPortMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockRepositoryPort)(nil).UpdateUser), arg0, arg1)
}
